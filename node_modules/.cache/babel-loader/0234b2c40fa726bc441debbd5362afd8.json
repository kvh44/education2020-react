{"ast":null,"code":"var toObject = require('./toObject');\n/**\n * The base implementation of `get` without support for string paths\n * and default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path of the property to get.\n * @param {string} [pathKey] The key representation of path.\n * @returns {*} Returns the resolved value.\n */\n\n\nfunction baseGet(object, path, pathKey) {\n  if (object == null) {\n    return;\n  }\n\n  object = toObject(object);\n\n  if (pathKey !== undefined && pathKey in object) {\n    path = [pathKey];\n  }\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = toObject(object)[path[index++]];\n  }\n\n  return index && index == length ? object : undefined;\n}\n\nmodule.exports = baseGet;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/baseGet.js"],"names":["toObject","require","baseGet","object","path","pathKey","undefined","index","length","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;AAEA;;;;;;;;;;;;AAUA,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,IAAzB,EAA+BC,OAA/B,EAAwC;AACtC,MAAIF,MAAM,IAAI,IAAd,EAAoB;AAClB;AACD;;AACDA,EAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAjB;;AACA,MAAIE,OAAO,KAAKC,SAAZ,IAAyBD,OAAO,IAAIF,MAAxC,EAAgD;AAC9CC,IAAAA,IAAI,GAAG,CAACC,OAAD,CAAP;AACD;;AACD,MAAIE,KAAK,GAAG,CAAZ;AAAA,MACIC,MAAM,GAAGJ,IAAI,CAACI,MADlB;;AAGA,SAAOL,MAAM,IAAI,IAAV,IAAkBI,KAAK,GAAGC,MAAjC,EAAyC;AACvCL,IAAAA,MAAM,GAAGH,QAAQ,CAACG,MAAD,CAAR,CAAiBC,IAAI,CAACG,KAAK,EAAN,CAArB,CAAT;AACD;;AACD,SAAQA,KAAK,IAAIA,KAAK,IAAIC,MAAnB,GAA6BL,MAA7B,GAAsCG,SAA7C;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiBR,OAAjB","sourcesContent":["var toObject = require('./toObject');\n\n/**\n * The base implementation of `get` without support for string paths\n * and default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array} path The path of the property to get.\n * @param {string} [pathKey] The key representation of path.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path, pathKey) {\n  if (object == null) {\n    return;\n  }\n  object = toObject(object);\n  if (pathKey !== undefined && pathKey in object) {\n    path = [pathKey];\n  }\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = toObject(object)[path[index++]];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n"]},"metadata":{},"sourceType":"script"}