{"ast":null,"code":"var baseToString = require('./baseToString'),\n    isArray = require('../lang/isArray');\n/** Used to match property names within property paths. */\n\n\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;\n/** Used to match backslashes in property paths. */\n\nvar reEscapeChar = /\\\\(\\\\)?/g;\n/**\n * Converts `value` to property path array if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Array} Returns the property path array.\n */\n\nfunction toPath(value) {\n  if (isArray(value)) {\n    return value;\n  }\n\n  var result = [];\n  baseToString(value).replace(rePropName, function (match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : number || match);\n  });\n  return result;\n}\n\nmodule.exports = toPath;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/toPath.js"],"names":["baseToString","require","isArray","rePropName","reEscapeChar","toPath","value","result","replace","match","number","quote","string","push","module","exports"],"mappings":"AAAA,IAAIA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA1B;AAAA,IACIC,OAAO,GAAGD,OAAO,CAAC,iBAAD,CADrB;AAGA;;;AACA,IAAIE,UAAU,GAAG,uEAAjB;AAEA;;AACA,IAAIC,YAAY,GAAG,UAAnB;AAEA;;;;;;;;AAOA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIJ,OAAO,CAACI,KAAD,CAAX,EAAoB;AAClB,WAAOA,KAAP;AACD;;AACD,MAAIC,MAAM,GAAG,EAAb;AACAP,EAAAA,YAAY,CAACM,KAAD,CAAZ,CAAoBE,OAApB,CAA4BL,UAA5B,EAAwC,UAASM,KAAT,EAAgBC,MAAhB,EAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AAC7EL,IAAAA,MAAM,CAACM,IAAP,CAAYF,KAAK,GAAGC,MAAM,CAACJ,OAAP,CAAeJ,YAAf,EAA6B,IAA7B,CAAH,GAAyCM,MAAM,IAAID,KAApE;AACD,GAFD;AAGA,SAAOF,MAAP;AACD;;AAEDO,MAAM,CAACC,OAAP,GAAiBV,MAAjB","sourcesContent":["var baseToString = require('./baseToString'),\n    isArray = require('../lang/isArray');\n\n/** Used to match property names within property paths. */\nvar rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\n\\\\]|\\\\.)*?)\\2)\\]/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `value` to property path array if it's not one.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {Array} Returns the property path array.\n */\nfunction toPath(value) {\n  if (isArray(value)) {\n    return value;\n  }\n  var result = [];\n  baseToString(value).replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n}\n\nmodule.exports = toPath;\n"]},"metadata":{},"sourceType":"script"}