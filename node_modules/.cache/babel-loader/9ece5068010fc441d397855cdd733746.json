{"ast":null,"code":"var arraySome = require('./arraySome');\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing arrays.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\n\n\nfunction equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var index = -1,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n    return false;\n  } // Ignore non-index properties.\n\n\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index],\n        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n    if (result !== undefined) {\n      if (result) {\n        continue;\n      }\n\n      return false;\n    } // Recursively compare arrays (susceptible to call stack limits).\n\n\n    if (isLoose) {\n      if (!arraySome(other, function (othValue) {\n        return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n      })) {\n        return false;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = equalArrays;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/equalArrays.js"],"names":["arraySome","require","equalArrays","array","other","equalFunc","customizer","isLoose","stackA","stackB","index","arrLength","length","othLength","arrValue","othValue","result","undefined","module","exports"],"mappings":"AAAA,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAD,CAAvB;AAEA;;;;;;;;;;;;;;;;AAcA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,SAAnC,EAA8CC,UAA9C,EAA0DC,OAA1D,EAAmEC,MAAnE,EAA2EC,MAA3E,EAAmF;AACjF,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,SAAS,GAAGR,KAAK,CAACS,MADtB;AAAA,MAEIC,SAAS,GAAGT,KAAK,CAACQ,MAFtB;;AAIA,MAAID,SAAS,IAAIE,SAAb,IAA0B,EAAEN,OAAO,IAAIM,SAAS,GAAGF,SAAzB,CAA9B,EAAmE;AACjE,WAAO,KAAP;AACD,GAPgF,CAQjF;;;AACA,SAAO,EAAED,KAAF,GAAUC,SAAjB,EAA4B;AAC1B,QAAIG,QAAQ,GAAGX,KAAK,CAACO,KAAD,CAApB;AAAA,QACIK,QAAQ,GAAGX,KAAK,CAACM,KAAD,CADpB;AAAA,QAEIM,MAAM,GAAGV,UAAU,GAAGA,UAAU,CAACC,OAAO,GAAGQ,QAAH,GAAcD,QAAtB,EAAgCP,OAAO,GAAGO,QAAH,GAAcC,QAArD,EAA+DL,KAA/D,CAAb,GAAqFO,SAF5G;;AAIA,QAAID,MAAM,KAAKC,SAAf,EAA0B;AACxB,UAAID,MAAJ,EAAY;AACV;AACD;;AACD,aAAO,KAAP;AACD,KAVyB,CAW1B;;;AACA,QAAIT,OAAJ,EAAa;AACX,UAAI,CAACP,SAAS,CAACI,KAAD,EAAQ,UAASW,QAAT,EAAmB;AACnC,eAAOD,QAAQ,KAAKC,QAAb,IAAyBV,SAAS,CAACS,QAAD,EAAWC,QAAX,EAAqBT,UAArB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDC,MAAlD,CAAzC;AACD,OAFS,CAAd,EAEQ;AACN,eAAO,KAAP;AACD;AACF,KAND,MAMO,IAAI,EAAEK,QAAQ,KAAKC,QAAb,IAAyBV,SAAS,CAACS,QAAD,EAAWC,QAAX,EAAqBT,UAArB,EAAiCC,OAAjC,EAA0CC,MAA1C,EAAkDC,MAAlD,CAApC,CAAJ,EAAoG;AACzG,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD;;AAEDS,MAAM,CAACC,OAAP,GAAiBjB,WAAjB","sourcesContent":["var arraySome = require('./arraySome');\n\n/**\n * A specialized version of `baseIsEqualDeep` for arrays with support for\n * partial deep comparisons.\n *\n * @private\n * @param {Array} array The array to compare.\n * @param {Array} other The other array to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing arrays.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA] Tracks traversed `value` objects.\n * @param {Array} [stackB] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.\n */\nfunction equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var index = -1,\n      arrLength = array.length,\n      othLength = other.length;\n\n  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {\n    return false;\n  }\n  // Ignore non-index properties.\n  while (++index < arrLength) {\n    var arrValue = array[index],\n        othValue = other[index],\n        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;\n\n    if (result !== undefined) {\n      if (result) {\n        continue;\n      }\n      return false;\n    }\n    // Recursively compare arrays (susceptible to call stack limits).\n    if (isLoose) {\n      if (!arraySome(other, function(othValue) {\n            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);\n          })) {\n        return false;\n      }\n    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = equalArrays;\n"]},"metadata":{},"sourceType":"script"}