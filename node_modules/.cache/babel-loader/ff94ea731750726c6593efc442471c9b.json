{"ast":null,"code":"var baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n/** Used as the size to enable large array optimizations. */\n\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * The base implementation of `_.difference` which accepts a single array\n * of values to exclude.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n */\n\nfunction baseDifference(array, values) {\n  var length = array ? array.length : 0,\n      result = [];\n\n  if (!length) {\n    return result;\n  }\n\n  var index = -1,\n      indexOf = baseIndexOf,\n      isCommon = true,\n      cache = isCommon && values.length >= LARGE_ARRAY_SIZE ? createCache(values) : null,\n      valuesLength = values.length;\n\n  if (cache) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n    values = cache;\n  }\n\n  outer: while (++index < length) {\n    var value = array[index];\n\n    if (isCommon && value === value) {\n      var valuesIndex = valuesLength;\n\n      while (valuesIndex--) {\n        if (values[valuesIndex] === value) {\n          continue outer;\n        }\n      }\n\n      result.push(value);\n    } else if (indexOf(values, value, 0) < 0) {\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = baseDifference;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/baseDifference.js"],"names":["baseIndexOf","require","cacheIndexOf","createCache","LARGE_ARRAY_SIZE","baseDifference","array","values","length","result","index","indexOf","isCommon","cache","valuesLength","outer","value","valuesIndex","push","module","exports"],"mappings":"AAAA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAD1B;AAAA,IAEIE,WAAW,GAAGF,OAAO,CAAC,eAAD,CAFzB;AAIA;;;AACA,IAAIG,gBAAgB,GAAG,GAAvB;AAEA;;;;;;;;;;AASA,SAASC,cAAT,CAAwBC,KAAxB,EAA+BC,MAA/B,EAAuC;AACrC,MAAIC,MAAM,GAAGF,KAAK,GAAGA,KAAK,CAACE,MAAT,GAAkB,CAApC;AAAA,MACIC,MAAM,GAAG,EADb;;AAGA,MAAI,CAACD,MAAL,EAAa;AACX,WAAOC,MAAP;AACD;;AACD,MAAIC,KAAK,GAAG,CAAC,CAAb;AAAA,MACIC,OAAO,GAAGX,WADd;AAAA,MAEIY,QAAQ,GAAG,IAFf;AAAA,MAGIC,KAAK,GAAID,QAAQ,IAAIL,MAAM,CAACC,MAAP,IAAiBJ,gBAA9B,GAAkDD,WAAW,CAACI,MAAD,CAA7D,GAAwE,IAHpF;AAAA,MAIIO,YAAY,GAAGP,MAAM,CAACC,MAJ1B;;AAMA,MAAIK,KAAJ,EAAW;AACTF,IAAAA,OAAO,GAAGT,YAAV;AACAU,IAAAA,QAAQ,GAAG,KAAX;AACAL,IAAAA,MAAM,GAAGM,KAAT;AACD;;AACDE,EAAAA,KAAK,EACL,OAAO,EAAEL,KAAF,GAAUF,MAAjB,EAAyB;AACvB,QAAIQ,KAAK,GAAGV,KAAK,CAACI,KAAD,CAAjB;;AAEA,QAAIE,QAAQ,IAAII,KAAK,KAAKA,KAA1B,EAAiC;AAC/B,UAAIC,WAAW,GAAGH,YAAlB;;AACA,aAAOG,WAAW,EAAlB,EAAsB;AACpB,YAAIV,MAAM,CAACU,WAAD,CAAN,KAAwBD,KAA5B,EAAmC;AACjC,mBAASD,KAAT;AACD;AACF;;AACDN,MAAAA,MAAM,CAACS,IAAP,CAAYF,KAAZ;AACD,KARD,MASK,IAAIL,OAAO,CAACJ,MAAD,EAASS,KAAT,EAAgB,CAAhB,CAAP,GAA4B,CAAhC,EAAmC;AACtCP,MAAAA,MAAM,CAACS,IAAP,CAAYF,KAAZ;AACD;AACF;;AACD,SAAOP,MAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiBf,cAAjB","sourcesContent":["var baseIndexOf = require('./baseIndexOf'),\n    cacheIndexOf = require('./cacheIndexOf'),\n    createCache = require('./createCache');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.difference` which accepts a single array\n * of values to exclude.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Array} values The values to exclude.\n * @returns {Array} Returns the new array of filtered values.\n */\nfunction baseDifference(array, values) {\n  var length = array ? array.length : 0,\n      result = [];\n\n  if (!length) {\n    return result;\n  }\n  var index = -1,\n      indexOf = baseIndexOf,\n      isCommon = true,\n      cache = (isCommon && values.length >= LARGE_ARRAY_SIZE) ? createCache(values) : null,\n      valuesLength = values.length;\n\n  if (cache) {\n    indexOf = cacheIndexOf;\n    isCommon = false;\n    values = cache;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index];\n\n    if (isCommon && value === value) {\n      var valuesIndex = valuesLength;\n      while (valuesIndex--) {\n        if (values[valuesIndex] === value) {\n          continue outer;\n        }\n      }\n      result.push(value);\n    }\n    else if (indexOf(values, value, 0) < 0) {\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseDifference;\n"]},"metadata":{},"sourceType":"script"}