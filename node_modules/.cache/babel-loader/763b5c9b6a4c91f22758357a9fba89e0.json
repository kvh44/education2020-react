{"ast":null,"code":"var baseGet = require('./baseGet'),\n    baseIsEqual = require('./baseIsEqual'),\n    baseSlice = require('./baseSlice'),\n    isArray = require('../lang/isArray'),\n    isKey = require('./isKey'),\n    isStrictComparable = require('./isStrictComparable'),\n    last = require('../array/last'),\n    toObject = require('./toObject'),\n    toPath = require('./toPath');\n/**\n * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to compare.\n * @returns {Function} Returns the new function.\n */\n\n\nfunction baseMatchesProperty(path, srcValue) {\n  var isArr = isArray(path),\n      isCommon = isKey(path) && isStrictComparable(srcValue),\n      pathKey = path + '';\n  path = toPath(path);\n  return function (object) {\n    if (object == null) {\n      return false;\n    }\n\n    var key = pathKey;\n    object = toObject(object);\n\n    if ((isArr || !isCommon) && !(key in object)) {\n      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n\n      if (object == null) {\n        return false;\n      }\n\n      key = last(path);\n      object = toObject(object);\n    }\n\n    return object[key] === srcValue ? srcValue !== undefined || key in object : baseIsEqual(srcValue, object[key], undefined, true);\n  };\n}\n\nmodule.exports = baseMatchesProperty;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/baseMatchesProperty.js"],"names":["baseGet","require","baseIsEqual","baseSlice","isArray","isKey","isStrictComparable","last","toObject","toPath","baseMatchesProperty","path","srcValue","isArr","isCommon","pathKey","object","key","length","undefined","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAAA,IACIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CADzB;AAAA,IAEIE,SAAS,GAAGF,OAAO,CAAC,aAAD,CAFvB;AAAA,IAGIG,OAAO,GAAGH,OAAO,CAAC,iBAAD,CAHrB;AAAA,IAIII,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAJnB;AAAA,IAKIK,kBAAkB,GAAGL,OAAO,CAAC,sBAAD,CALhC;AAAA,IAMIM,IAAI,GAAGN,OAAO,CAAC,eAAD,CANlB;AAAA,IAOIO,QAAQ,GAAGP,OAAO,CAAC,YAAD,CAPtB;AAAA,IAQIQ,MAAM,GAAGR,OAAO,CAAC,UAAD,CARpB;AAUA;;;;;;;;;;AAQA,SAASS,mBAAT,CAA6BC,IAA7B,EAAmCC,QAAnC,EAA6C;AAC3C,MAAIC,KAAK,GAAGT,OAAO,CAACO,IAAD,CAAnB;AAAA,MACIG,QAAQ,GAAGT,KAAK,CAACM,IAAD,CAAL,IAAeL,kBAAkB,CAACM,QAAD,CADhD;AAAA,MAEIG,OAAO,GAAIJ,IAAI,GAAG,EAFtB;AAIAA,EAAAA,IAAI,GAAGF,MAAM,CAACE,IAAD,CAAb;AACA,SAAO,UAASK,MAAT,EAAiB;AACtB,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,aAAO,KAAP;AACD;;AACD,QAAIC,GAAG,GAAGF,OAAV;AACAC,IAAAA,MAAM,GAAGR,QAAQ,CAACQ,MAAD,CAAjB;;AACA,QAAI,CAACH,KAAK,IAAI,CAACC,QAAX,KAAwB,EAAEG,GAAG,IAAID,MAAT,CAA5B,EAA8C;AAC5CA,MAAAA,MAAM,GAAGL,IAAI,CAACO,MAAL,IAAe,CAAf,GAAmBF,MAAnB,GAA4BhB,OAAO,CAACgB,MAAD,EAASb,SAAS,CAACQ,IAAD,EAAO,CAAP,EAAU,CAAC,CAAX,CAAlB,CAA5C;;AACA,UAAIK,MAAM,IAAI,IAAd,EAAoB;AAClB,eAAO,KAAP;AACD;;AACDC,MAAAA,GAAG,GAAGV,IAAI,CAACI,IAAD,CAAV;AACAK,MAAAA,MAAM,GAAGR,QAAQ,CAACQ,MAAD,CAAjB;AACD;;AACD,WAAOA,MAAM,CAACC,GAAD,CAAN,KAAgBL,QAAhB,GACFA,QAAQ,KAAKO,SAAb,IAA2BF,GAAG,IAAID,MADhC,GAEHd,WAAW,CAACU,QAAD,EAAWI,MAAM,CAACC,GAAD,CAAjB,EAAwBE,SAAxB,EAAmC,IAAnC,CAFf;AAGD,GAjBD;AAkBD;;AAEDC,MAAM,CAACC,OAAP,GAAiBX,mBAAjB","sourcesContent":["var baseGet = require('./baseGet'),\n    baseIsEqual = require('./baseIsEqual'),\n    baseSlice = require('./baseSlice'),\n    isArray = require('../lang/isArray'),\n    isKey = require('./isKey'),\n    isStrictComparable = require('./isStrictComparable'),\n    last = require('../array/last'),\n    toObject = require('./toObject'),\n    toPath = require('./toPath');\n\n/**\n * The base implementation of `_.matchesProperty` which does not clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to compare.\n * @returns {Function} Returns the new function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  var isArr = isArray(path),\n      isCommon = isKey(path) && isStrictComparable(srcValue),\n      pathKey = (path + '');\n\n  path = toPath(path);\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    var key = pathKey;\n    object = toObject(object);\n    if ((isArr || !isCommon) && !(key in object)) {\n      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));\n      if (object == null) {\n        return false;\n      }\n      key = last(path);\n      object = toObject(object);\n    }\n    return object[key] === srcValue\n      ? (srcValue !== undefined || (key in object))\n      : baseIsEqual(srcValue, object[key], undefined, true);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n"]},"metadata":{},"sourceType":"script"}