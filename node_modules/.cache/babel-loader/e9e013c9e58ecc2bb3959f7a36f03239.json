{"ast":null,"code":"var equalArrays = require('./equalArrays'),\n    equalByTag = require('./equalByTag'),\n    equalObjects = require('./equalObjects'),\n    isArray = require('../lang/isArray'),\n    isHostObject = require('./isHostObject'),\n    isTypedArray = require('../lang/isTypedArray');\n/** `Object#toString` result references. */\n\n\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n/** Used for native method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar objToString = objectProto.toString;\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing objects.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA=[]] Tracks traversed `value` objects.\n * @param {Array} [stackB=[]] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\n\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = objToString.call(object);\n\n    if (objTag == argsTag) {\n      objTag = objectTag;\n    } else if (objTag != objectTag) {\n      objIsArr = isTypedArray(object);\n    }\n  }\n\n  if (!othIsArr) {\n    othTag = objToString.call(other);\n\n    if (othTag == argsTag) {\n      othTag = objectTag;\n    } else if (othTag != objectTag) {\n      othIsArr = isTypedArray(other);\n    }\n  }\n\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !(objIsArr || objIsObj)) {\n    return equalByTag(object, other, objTag);\n  }\n\n  if (!isLoose) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n    }\n  }\n\n  if (!isSameTag) {\n    return false;\n  } // Assume cyclic values are equal.\n  // For more information on detecting circular references see https://es5.github.io/#JO.\n\n\n  stackA || (stackA = []);\n  stackB || (stackB = []);\n  var length = stackA.length;\n\n  while (length--) {\n    if (stackA[length] == object) {\n      return stackB[length] == other;\n    }\n  } // Add `object` and `other` to the stack of traversed objects.\n\n\n  stackA.push(object);\n  stackB.push(other);\n  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n  stackA.pop();\n  stackB.pop();\n  return result;\n}\n\nmodule.exports = baseIsEqualDeep;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/baseIsEqualDeep.js"],"names":["equalArrays","require","equalByTag","equalObjects","isArray","isHostObject","isTypedArray","argsTag","arrayTag","objectTag","objectProto","Object","prototype","hasOwnProperty","objToString","toString","baseIsEqualDeep","object","other","equalFunc","customizer","isLoose","stackA","stackB","objIsArr","othIsArr","objTag","othTag","call","objIsObj","othIsObj","isSameTag","objIsWrapped","othIsWrapped","value","length","push","result","pop","module","exports"],"mappings":"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","sourcesContent":["var equalArrays = require('./equalArrays'),\n    equalByTag = require('./equalByTag'),\n    equalObjects = require('./equalObjects'),\n    isArray = require('../lang/isArray'),\n    isHostObject = require('./isHostObject'),\n    isTypedArray = require('../lang/isTypedArray');\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    objectTag = '[object Object]';\n\n/** Used for native method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objToString = objectProto.toString;\n\n/**\n * A specialized version of `baseIsEqual` for arrays and objects which performs\n * deep comparisons and tracks traversed objects enabling objects with circular\n * references to be compared.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {Function} equalFunc The function to determine equivalents of values.\n * @param {Function} [customizer] The function to customize comparing objects.\n * @param {boolean} [isLoose] Specify performing partial comparisons.\n * @param {Array} [stackA=[]] Tracks traversed `value` objects.\n * @param {Array} [stackB=[]] Tracks traversed `other` objects.\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.\n */\nfunction baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {\n  var objIsArr = isArray(object),\n      othIsArr = isArray(other),\n      objTag = arrayTag,\n      othTag = arrayTag;\n\n  if (!objIsArr) {\n    objTag = objToString.call(object);\n    if (objTag == argsTag) {\n      objTag = objectTag;\n    } else if (objTag != objectTag) {\n      objIsArr = isTypedArray(object);\n    }\n  }\n  if (!othIsArr) {\n    othTag = objToString.call(other);\n    if (othTag == argsTag) {\n      othTag = objectTag;\n    } else if (othTag != objectTag) {\n      othIsArr = isTypedArray(other);\n    }\n  }\n  var objIsObj = objTag == objectTag && !isHostObject(object),\n      othIsObj = othTag == objectTag && !isHostObject(other),\n      isSameTag = objTag == othTag;\n\n  if (isSameTag && !(objIsArr || objIsObj)) {\n    return equalByTag(object, other, objTag);\n  }\n  if (!isLoose) {\n    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),\n        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');\n\n    if (objIsWrapped || othIsWrapped) {\n      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);\n    }\n  }\n  if (!isSameTag) {\n    return false;\n  }\n  // Assume cyclic values are equal.\n  // For more information on detecting circular references see https://es5.github.io/#JO.\n  stackA || (stackA = []);\n  stackB || (stackB = []);\n\n  var length = stackA.length;\n  while (length--) {\n    if (stackA[length] == object) {\n      return stackB[length] == other;\n    }\n  }\n  // Add `object` and `other` to the stack of traversed objects.\n  stackA.push(object);\n  stackB.push(other);\n\n  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);\n\n  stackA.pop();\n  stackB.pop();\n\n  return result;\n}\n\nmodule.exports = baseIsEqualDeep;\n"]},"metadata":{},"sourceType":"script"}