{"ast":null,"code":"var identity = require('../utility/identity');\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\n\n\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n\n  if (thisArg === undefined) {\n    return func;\n  }\n\n  switch (argCount) {\n    case 1:\n      return function (value) {\n        return func.call(thisArg, value);\n      };\n\n    case 3:\n      return function (value, index, collection) {\n        return func.call(thisArg, value, index, collection);\n      };\n\n    case 4:\n      return function (accumulator, value, index, collection) {\n        return func.call(thisArg, accumulator, value, index, collection);\n      };\n\n    case 5:\n      return function (value, other, key, object, source) {\n        return func.call(thisArg, value, other, key, object, source);\n      };\n  }\n\n  return function () {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;","map":{"version":3,"sources":["/Users/renard/education2020-react/node_modules/lodash-compat/internal/bindCallback.js"],"names":["identity","require","bindCallback","func","thisArg","argCount","undefined","value","call","index","collection","accumulator","other","key","object","source","apply","arguments","module","exports"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;AAEA;;;;;;;;;;;;AAUA,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqCC,QAArC,EAA+C;AAC7C,MAAI,OAAOF,IAAP,IAAe,UAAnB,EAA+B;AAC7B,WAAOH,QAAP;AACD;;AACD,MAAII,OAAO,KAAKE,SAAhB,EAA2B;AACzB,WAAOH,IAAP;AACD;;AACD,UAAQE,QAAR;AACE,SAAK,CAAL;AAAQ,aAAO,UAASE,KAAT,EAAgB;AAC7B,eAAOJ,IAAI,CAACK,IAAL,CAAUJ,OAAV,EAAmBG,KAAnB,CAAP;AACD,OAFO;;AAGR,SAAK,CAAL;AAAQ,aAAO,UAASA,KAAT,EAAgBE,KAAhB,EAAuBC,UAAvB,EAAmC;AAChD,eAAOP,IAAI,CAACK,IAAL,CAAUJ,OAAV,EAAmBG,KAAnB,EAA0BE,KAA1B,EAAiCC,UAAjC,CAAP;AACD,OAFO;;AAGR,SAAK,CAAL;AAAQ,aAAO,UAASC,WAAT,EAAsBJ,KAAtB,EAA6BE,KAA7B,EAAoCC,UAApC,EAAgD;AAC7D,eAAOP,IAAI,CAACK,IAAL,CAAUJ,OAAV,EAAmBO,WAAnB,EAAgCJ,KAAhC,EAAuCE,KAAvC,EAA8CC,UAA9C,CAAP;AACD,OAFO;;AAGR,SAAK,CAAL;AAAQ,aAAO,UAASH,KAAT,EAAgBK,KAAhB,EAAuBC,GAAvB,EAA4BC,MAA5B,EAAoCC,MAApC,EAA4C;AACzD,eAAOZ,IAAI,CAACK,IAAL,CAAUJ,OAAV,EAAmBG,KAAnB,EAA0BK,KAA1B,EAAiCC,GAAjC,EAAsCC,MAAtC,EAA8CC,MAA9C,CAAP;AACD,OAFO;AAVV;;AAcA,SAAO,YAAW;AAChB,WAAOZ,IAAI,CAACa,KAAL,CAAWZ,OAAX,EAAoBa,SAApB,CAAP;AACD,GAFD;AAGD;;AAEDC,MAAM,CAACC,OAAP,GAAiBjB,YAAjB","sourcesContent":["var identity = require('../utility/identity');\n\n/**\n * A specialized version of `baseCallback` which only supports `this` binding\n * and specifying the number of arguments to provide to `func`.\n *\n * @private\n * @param {Function} func The function to bind.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {number} [argCount] The number of arguments to provide to `func`.\n * @returns {Function} Returns the callback.\n */\nfunction bindCallback(func, thisArg, argCount) {\n  if (typeof func != 'function') {\n    return identity;\n  }\n  if (thisArg === undefined) {\n    return func;\n  }\n  switch (argCount) {\n    case 1: return function(value) {\n      return func.call(thisArg, value);\n    };\n    case 3: return function(value, index, collection) {\n      return func.call(thisArg, value, index, collection);\n    };\n    case 4: return function(accumulator, value, index, collection) {\n      return func.call(thisArg, accumulator, value, index, collection);\n    };\n    case 5: return function(value, other, key, object, source) {\n      return func.call(thisArg, value, other, key, object, source);\n    };\n  }\n  return function() {\n    return func.apply(thisArg, arguments);\n  };\n}\n\nmodule.exports = bindCallback;\n"]},"metadata":{},"sourceType":"script"}